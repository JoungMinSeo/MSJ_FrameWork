<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- 
		DispatcherServlet이란?
		모든 요청을 프레젠테이션 계층 제일 앞에서 받아 들여 처리하는 역할의 프론트 컨트롤러
		 + 내부에 View Resolver가 작성되어 있어 컨트롤러에서 반환되는 
		    jsp파일의 이름을 이용해 요청 위임을 진행해줌.  (모든 요청, 응답을 제어하는 관제탑)
	 -->
	
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : @Controller에 요청을 전달하기 위한
							HandlerMapping 요소를 Bean으로 등록함.
		해당 태그가 작성되 있어야지만
		@RequestMapping, @ExceptionHandler 를 사용할 수 있다.
	 -->
	<annotation-driven />
	
	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<!-- View Resolver : 컨트롤러에서 반환된 jsp 이름을 토대로 알맞은 jsp를 검색하여
						요청 위임하는 역할
						prefix : 접두사  / suffix : 접미사
	 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<context:component-scan base-package="edu.kh.fin" />
	<!-- 
		component-scan : 지정된 패키지에 있는 @Component와
		그 구체화 요소(@Controller, @Service, @Repository)모두 스캔하여 Bean으로 등록하는 태그
	
		Bean == 스프링 컨테이너(IoC컨테이너)가 관리하는 객체
			==	스프링이 마음대로 제어할 수 있는 객체
	 -->
	
	<!-- ChatWebSocketHandler 클래스를 bean으로 등록 -->
	<beans:bean id="chatHandler" class="edu.kh.fin.chat.websocket.ChatWebSocketHandler" />
	
	<!-- /chat 이라는 주소로 오는 웹소켓 요청을 
		ChatWebSocketHandler클래스와 연결하기 -->
	<websocket:handlers>
		<websocket:mapping handler="chatHandler" path="/chat"/>
	
		<websocket:handshake-interceptors>
			<!-- interceptor : HTTP 통신에서 request, response를 가로채는 역할
				 handshake : HttpSession에 있는 값을 가로채서
				 			 WebSocketSession에 넣어주는 역할-->
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
		</websocket:handshake-interceptors>
		
		<websocket:sockjs/>
		
	</websocket:handlers>
	
	
	<!-- 스프링 스케쥴러 어노테이션 @Scheduled를 인식하는 태그 -->
	<task:annotation-driven/>
	
	<!-- AOP 관련 어노테이션 활성화 + proxy 사용 -->
	<aop:aspectj-autoproxy/>
	
	
	
</beans:beans>
