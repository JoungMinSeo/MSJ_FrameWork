<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">

	<!-- 카테고리 조회용 resultMap -->
	<resultMap type="Category" id="category_rm">
		<id property="categoryCode" column="CATEGORY_CD" />
	
		<result property="categoryName" column="CATEGORY_NM" />
	</resultMap>
	
 	
	<!-- 파일 정보 조회용 resultMap -->
	<resultMap type="Attachment" id="attachment_rm">
		<id property="fileNo" column="FILE_NO"/>
		
		<result property="filePath" column="FILE_PATH"/>
		<result property="fileName" column="FILE_NM"/>
		<result property="fileLevel" column="FILE_LEVEL"/>
		<result property="boardNo" column="BOARD_NO"/>
	</resultMap>
 	
 	
 	<!-- Pagination용 resultMap -->
 	<resultMap type="Pagination" id="pg_rm">
 		<result property="listCount"  column="CNT"/>
 		<result property="boardName"  column="BOARD_NM"/>
 	</resultMap>
 	
 	<!-- 게시글 목록, 상세조회용 resultMap -->	
	<resultMap type="Board" id="board_rm">
		<id property="boardNo" column="BOARD_NO"/>
	
		<result property="boardTitle" column="BOARD_TITLE"/>
		<result property="memberName" column="MEMBER_NM"/>
		<result property="categoryName" column="CATEGORY_NM"/>
		<result property="readCount" column="READ_COUNT"/>
		<result property="createDate" column="CREATE_DT"/>
		
		<result property="boardContent" column="BOARD_CONTENT"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="modifyDate" column="MODIFY_DT"/>
		
		<!-- Board VO의 atList 필드는
			게시글 번호가 일치하는 이미지 정보를 모두 얻어와 List로 저장하는 변수이다.
			
			board_rm resultMap이 사용되는 경우
			자동으로 게시글 번호(BOARD_NO)컬럼 값을 얻어와
			ATTACHMENT 테이블에서 게시글 번호가 일치하는 정보를 조회해
			List로 반환하게 하는 동작을 만들 수 있다.
		 -->
		 
 		<collection property="atList" column="BOARD_NO" 
			javaType="java.util.ArrayList" ofType="Attachment" select="selectAttachment"/>
			
		<!-- collection 태그의 column 속성 
			 -> 현재 resultMap에서 해당 List를 조회할 때 조건으로 사용할 컬럼을 지정
			 
			 javaType : 조회 결과를 저장할 컬렉션 객체 지정
			 ofType : javaType으로 지정된 컬렉션의 제네릭(타입 제한) 지정
			 select : column을 이용해서 조회하려는 SQL구문 지정
		 -->
	</resultMap>
	
	<!-- 특정 게시글의 모든 이미지 정보 조회 -->
	<select id="selectAttachment" parameterType="_int" resultMap="attachment_rm">
		SELECT * FROM ATTACHMENT
		WHERE BOARD_NO = #{boardNo}
		ORDER BY FILE_LEVEL
	</select>
 
 
 	<!-- 특정 게시판 전체 게시글 수 + 게시판 이름 조회-->
 	<select id="getListCount" parameterType="_int"  resultMap="pg_rm" >
 		SELECT CNT, (SELECT BOARD_NM FROM BOARD_TYPE WHERE BOARD_TYPE_NO = #{boardType}) BOARD_NM
		FROM (SELECT COUNT(*) CNT
		    FROM BOARD_LIST
		    WHERE BOARD_TYPE_NO = #{boardType} AND BOARD_STATUS = 'Y')
 	</select>
  
  	<!-- 특정 게시판 검색 게시글 수 + 게시판 이름 조회 -->
  	<select id="getSearchListCount" parameterType="Search" resultMap="pg_rm">
		SELECT CNT, (SELECT BOARD_NM FROM BOARD_TYPE WHERE BOARD_TYPE_NO = #{boardType}) BOARD_NM
		FROM (SELECT COUNT(*) CNT
		    FROM BOARD_LIST
		WHERE BOARD_TYPE_NO = #{boardType} AND BOARD_STATUS = 'Y'
		
		<!-- 검색어를 나타내는 sv가 있을 때만 조건을 추가 -->
		<if test="sv != null">
			AND 
			
			<!-- bind 태그 : 변수 선언 -->
			<bind name="val" value="'%' + sv + '%'"/>
			
			<!-- sk에 따라서 조건절을 선택함(title, content, titcont, writer) -->
			<choose>
			
				<when test="sk == 'title'" >
					BOARD_TITLE LIKE #{val}
				</when>
				<when test="sk == 'content'" >
					BOARD_CONTENT LIKE #{val}
				</when>
				<when test="sk == 'titcont'" >
					( BOARD_TITLE LIKE #{val} OR BOARD_CONTENT LIKE #{val} )
				</when>
				<when test="sk == 'writer'" >
					MEMBER_NM LIKE #{val}
				</when>
			
			</choose>
		</if> 
		
		
		<!-- 카테고리가 조건으로 추가되어 있는 경우 -->
		<if test="ct != null">
			AND CATEGORY_CD IN 
			
			<!-- collection : 반복 접근하려는 배열 또는 컬렉션 객체
				 item : collection에서 순차적으로 하나씩 꺼냈을 때 저장할 변수
				 open : 반복문 시작 시 제일 앞에 붙일 단어
				 close : 반복문 종료 시 제일 뒤에 붙일 단어
				 separator : 반복 때 마다 추가할 구분자
			-->
			<foreach collection="ct" item="code" open="("  close=")" separator=",">
				#{code}
			</foreach>
			
		</if>
		
		)
  	
  	</select>
  
  
  
  
  	<!-- 게시글 목록 조회 -->
  	<select id="selectBoardList" parameterType="_int" resultMap="board_rm">
  		SELECT * FROM BOARD_LIST
		WHERE BOARD_STATUS = 'Y'
		AND BOARD_TYPE_NO = #{boardType}
		ORDER BY BOARD_NO DESC
  	</select>
  	
  	
  	<!-- 게시글 목록 조회(검색) -->
  	<select id="selectSearchList" parameterType="Search" resultMap="board_rm">
  		SELECT * FROM BOARD_LIST
		WHERE BOARD_STATUS = 'Y'
		AND BOARD_TYPE_NO = #{boardType}
		
		<!-- 검색어를 나타내는 sv가 있을 때만 조건을 추가 -->
		<if test="sv != null">
			AND 
			
			<!-- bind 태그 : 변수 선언 -->
			<bind name="val" value="'%' + sv + '%'"/>
			
			<!-- sk에 따라서 조건절을 선택함(title, content, titcont, writer) -->
			<choose>
			
				<when test="sk == 'title'" >
					BOARD_TITLE LIKE #{val}
				</when>
				<when test="sk == 'content'" >
					BOARD_CONTENT LIKE #{val}
				</when>
				<when test="sk == 'titcont'" >
					( BOARD_TITLE LIKE #{val} OR BOARD_CONTENT LIKE #{val} )
				</when>
				<when test="sk == 'writer'" >
					MEMBER_NM LIKE #{val}
				</when>
			
			</choose>
		</if> 
		
		<!-- 카테고리가 조건으로 추가되어 있는 경우 -->
		<if test="ct != null">
			AND CATEGORY_CD IN 
			
			<!-- collection : 반복 접근하려는 배열 또는 컬렉션 객체
				 item : collection에서 순차적으로 하나씩 꺼냈을 때 저장할 변수
				 open : 반복문 시작 시 제일 앞에 붙일 단어
				 close : 반복문 종료 시 제일 뒤에 붙일 단어
				 separator : 반복 때 마다 추가할 구분자
			-->
			<foreach collection="ct" item="code" open="("  close=")" separator=",">
				#{code}
			</foreach>
			
		</if>
		
		ORDER BY BOARD_NO DESC
  	</select>
  
  
  
  
  
  
  
  	<!-- 게시글 상세 조회 
  		+ 해당 게시글에 첨부된 이미지 목록도 조회
  	-->
  	<select id="selectBoard" parameterType="_int" resultMap="board_rm">
  		SELECT BOARD_NO, CATEGORY_NM, BOARD_TITLE, BOARD_CONTENT, 
         		MEMBER_NO, MEMBER_NM, READ_COUNT, CREATE_DT, MODIFY_DT, BOARD_TYPE_NO
		FROM BOARD
		JOIN CATEGORY USING(CATEGORY_CD)
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_NO = #{boardNo}
		AND BOARD_STATUS = 'Y'
  	</select>
  
  	<!-- 조회 수 증가 -->
  	<update id="increaseReadCount" parameterType="_int">
  		UPDATE BOARD SET
  		READ_COUNT = READ_COUNT + 1
  		WHERE BOARD_NO = #{boardNo}
  	</update>
  
  
  	<!-- 카테고리 목록 조회 -->
  	<select id="selectCategory" resultMap="category_rm">
  		SELECT * FROM CATEGORY
  	</select>
  	
  	
  	
  	<!-- 게시글 삽입 -->
	<!-- 
	useGeneratedKeys : 데이터베이스에서 내부적으로 생성한 키(ex. 시퀀스)를 받는 
		JDBC getGeneratedKeys메소드를 사용하도록 설정하다. 기본값 false
		 
	selectKey 태그 : insert, update 후 사용된 오라클 시퀀스를 반환하는 태그
		keyProperty	: selectKey구문의 결과가 셋팅될 대상 프로퍼티.
		keyColumn :	리턴되는 결과셋의 칼럼명은 프로퍼티에 일치한다. 여러개의 칼럼을 사용한다면 칼럼명의 목록은 콤마를 사용해서 구분한다.
		resultType :	결과의 타입. 마이바티스는 이 기능을 제거할 수 있지만 추가하는게 문제가 되지는 않을것이다. 마이바티스는 String을 포함하여 키로 사용될 수 있는 간단한 타입을 허용한다.
		order	:BEFORE 또는 AFTER를 셋팅할 수 있다. BEFORE로 설정하면 키를 먼저 조회하고 그 값을 keyProperty 에 셋팅한 뒤 insert 구문을 실행한다. AFTER로 설정하면 insert 구문을 실행한 뒤 selectKey 구문을 실행한다. 오라클과 같은 데이터베이스에서는 insert구문 내부에서 일관된 호출형태로 처리한다.
		statementType	: 위 내용과 같다. 마이바티스는 Statement, PreparedStatement 그리고 CallableStatement을 매핑하기 위해 STATEMENT, PREPARED 그리고 CALLABLE 구문타입을 지원한다.
		[출처. 마이바티스 공식 홈페이지]
	-->
  	<insert id="insertBoard" parameterType="Board" useGeneratedKeys="true">
  		
  		<selectKey keyProperty="boardNo" resultType="_int" order="BEFORE">
  			SELECT SEQ_BNO.NEXTVAL FROM DUAL
  		</selectKey>
  		
  		INSERT INTO BOARD VALUES
  		( #{boardNo}, #{boardTitle}, #{boardContent}, DEFAULT,DEFAULT,DEFAULT,DEFAULT,
  		  #{memberNo}, #{categoryCode}, #{boardType}  )
  	
  	</insert>
  
  
  	<!-- 파일 정보 삽입(List) -->
  	<!-- 마이바티스 동적 SQL : SQL 구문 내부에 if, foreach 등의 태그를 사용해서
  							   SQL 구문 수행 중에 SQL 형태를 변경하는 기능
  	 -->
  	<insert id="insertAttachmentList"  parameterType="list">
  		INSERT INTO ATTACHMENT
  		SELECT SEQ_FNO.NEXTVAL, A.* FROM (
  		
  			<foreach collection="list" item="at" separator=" UNION ALL ">
  				SELECT  #{at.filePath} FILE_PATH,  
  						#{at.fileName} FILE_NAME, 
                		#{at.fileLevel} FILE_LEVEL, 
                		#{at.boardNo} BOARD_NO  FROM DUAL
  			</foreach>
  		) A
  		
  	</insert>
  
  
  	<!-- 게시글 수정 -->
  	<update id="updateBoard"  parameterType="Board">
  		UPDATE BOARD SET
  		BOARD_TITLE =  #{boardTitle} ,
  		BOARD_CONTENT = #{boardContent} ,
  		CATEGORY_CD = #{categoryCode} ,
  		MODIFY_DT = SYSTIMESTAMP
  		WHERE BOARD_NO = #{boardNo} 
  	</update>
  
  
  	<!-- 첨부 파일 정보 삭제 -->
  	<delete id="deleteAttachment" parameterType="map" >
  		<!-- 파라미터가 Map 형식인 경우  #{key} 를 작성하면 value가 나옴  -->
  		
  		DELETE FROM ATTACHMENT
  		WHERE BOARD_NO = #{boardNo}
  		AND FILE_LEVEL IN (  ${deleteImages}  )
  		
  		<!-- 
  			#{} : PreparedStatement 기호로 값의 자료형에 따라 자동으로 ''(홑따옴표)를 붙여줄 수 있음
  			${} : Statement 기호로 ''(홑따옴표)가 자동으로 붙지 않음.
  					== SQL구문 자체로 인식됨
  		 -->
  		
  		<!-- boardNo : 500   /  deleteImages : "1,2,0" -->
  		
  	</delete>
  
  	<!-- 첨부 파일 정보 수정(한 행) -->
  	<update id="updateAttachment" parameterType="Attachment">
  		UPDATE ATTACHMENT SET
  		FILE_NM = #{fileName}
  		WHERE BOARD_NO = #{boardNo}
  		AND FILE_LEVEL = #{fileLevel}
  	</update>
  
  
  	<!-- 첨부 파일 정보 삽입 (한 행) -->
  	<insert id="insertAttachment" parameterType="Attachment" >
  		INSERT INTO ATTACHMENT VALUES
  		(SEQ_FNO.NEXTVAL, #{filePath}, #{fileName}, #{fileLevel}, #{boardNo})
  	</insert>
  
  
  
  	<!-- 72시간 보다 더 과거에 추가된 파일명 조회 -->
  	<select id="selectDBList" parameterType="string" resultType="string">
  		SELECT FILE_NM FROM ATTACHMENT
		<![CDATA[  WHERE SUBSTR(FILE_NM, 0, 10) < #{standard}   ]]>
  	</select>
  	
  	<!-- 
  		html, xml과 같은 마크업 언어를 사용하는 문서에서는
  		<, > 부등호 기호가 태그로 인식됨
  		&lt; &gt; 제공
  		<![CDATA[ 내용 ]]>
  			-> 내용 안에 포함된 <> 기호가 문자 자체로 인식됨
  	
  	 -->
  
  
  
  
  
  
  
  
</mapper>